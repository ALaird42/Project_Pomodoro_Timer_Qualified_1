{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Space\\\\Desktop\\\\Thinkful\\\\Qualified\\\\Project- Pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakButtons from \"./BreakButtons\";\nimport WorkButtons from \"./WorkButtons\";\nimport StartStop from \"./StartStop\";\nimport DisplayText from \"./DisplayText\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration/index\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [breakTime, setBreakTime] = useState(5);\n  const [focusTime, setFocusTime] = useState(25);\n  const [displayTime, setDisplayTime] = useState(focusTime);\n  const [countDownTime, setCountDownTime] = useState(displayTime * 60);\n  const [isFocusTime, setIsFocusTime] = useState(true);\n\n  const countDownTimeHandler = () => {\n    setCountDownTime(displayTime * 60);\n  };\n\n  const breakTimeHandlerPlus = () => {\n    if (isTimerRunning === false && breakTime < 15) {\n      setBreakTime(prevBreak => prevBreak + 1);\n    }\n  };\n\n  const breaktimeHanlderMinus = () => {\n    if (isTimerRunning === false && breakTime > 1) {\n      setBreakTime(prevBreak => prevBreak - 1);\n    }\n  };\n\n  const focusTimeHandlerPlus = () => {\n    if (isTimerRunning === false && focusTime < 60) {\n      setFocusTime(prevFocus => prevFocus + 1);\n      setDisplayTime(prevDisplay => focusTime + 1);\n      countDownTimeHandler();\n    }\n  };\n\n  const focusTimeHandlerMinus = () => {\n    if (isTimerRunning === false && focusTime > 5) {\n      setFocusTime(prevFocus => prevFocus - 1);\n      setDisplayTime(prevDisplay => focusTime - 1);\n      countDownTimeHandler();\n    }\n  };\n\n  const displayTimeHandler = () => {\n    /*Use conditional statements to switch between Focus and Break times. Use a useEffect to dynamically adjust foucs or break times \n    being displayed in at the bottom of the page each time the focus or break time changes*/\n    setIsFocusTime(prevState => !prevState);\n\n    if (isFocusTime === true) {\n      setDisplayTime(focusTime);\n    } else {\n      setDisplayTime(breakTime);\n    }\n  };\n\n  useInterval(() => {\n    /* ToDo: Implement what should happen when the timer is running. \n    Refrence the break or work time states and then feeds the DisplayText.js (text at bottom of page that counts down each second)*/\n    if (countDownTime > 0) {\n      setCountDownTime(countDownTime - 1);\n    }\n\n    ;\n\n    if (countDownTime === 0) {\n      setIsTimerRunning(false);\n      displayTimeHandler();\n      countDownTimeHandler();\n      setIsTimerRunning(true);\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  useEffect(() => {\n    if (isTimerRunning === true) {\n      console.log(\"Ruinnig\");\n    } else {\n      console.log(\"Paused\");\n    }\n  }, [isTimerRunning]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WorkButtons, {\n    focusTime: focusTime,\n    isTimerRunning: isTimerRunning,\n    focusPlus: focusTimeHandlerPlus,\n    focusMinus: focusTimeHandlerMinus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(BreakButtons, {\n    breakTime: breakTime,\n    isTimerRunning: isTimerRunning,\n    breakPlus: breakTimeHandlerPlus,\n    breakMinus: breaktimeHanlderMinus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    classNames: classNames,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }\n  }))), /*#__PURE__*/React.createElement(DisplayText, {\n    isTimerRunning: isTimerRunning,\n    displayTime: displayTime,\n    countDownTime: countDownTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Space/Desktop/Thinkful/Qualified/Project- Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useEffect","classNames","useInterval","BreakButtons","WorkButtons","StartStop","DisplayText","minutesToDuration","secondsToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","breakTime","setBreakTime","focusTime","setFocusTime","displayTime","setDisplayTime","countDownTime","setCountDownTime","isFocusTime","setIsFocusTime","countDownTimeHandler","breakTimeHandlerPlus","prevBreak","breaktimeHanlderMinus","focusTimeHandlerPlus","prevFocus","prevDisplay","focusTimeHandlerMinus","displayTimeHandler","prevState","playPause","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakButtons from \"./BreakButtons\";\nimport WorkButtons from \"./WorkButtons\"\nimport StartStop from \"./StartStop\"\nimport DisplayText from \"./DisplayText\"\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration/index\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [breakTime, setBreakTime] =useState(5);\n  const [focusTime, setFocusTime] =useState(25);\n  const [displayTime, setDisplayTime] =useState(focusTime);\n  const [countDownTime, setCountDownTime] = useState(displayTime * 60)\n  const [isFocusTime, setIsFocusTime] =useState(true)\n\n  \n  const countDownTimeHandler =() => {\n    setCountDownTime(displayTime*60)\n  }\n  const breakTimeHandlerPlus = () => {\n    if ( isTimerRunning === false && breakTime < 15 ){\n      setBreakTime((prevBreak) =>prevBreak + 1)}\n  }\n  const breaktimeHanlderMinus = () => {\n    if (isTimerRunning === false && breakTime > 1 ){\n      setBreakTime((prevBreak)=>prevBreak - 1)\n    }\n  }\n  const focusTimeHandlerPlus = () => {\n    if (isTimerRunning === false && focusTime < 60){\n      setFocusTime((prevFocus) =>prevFocus + 1);\n      setDisplayTime((prevDisplay) =>focusTime + 1);\n      countDownTimeHandler()\n    }\n  }\n  const focusTimeHandlerMinus = () => {\n    if (isTimerRunning === false && focusTime > 5){\n      setFocusTime((prevFocus) =>prevFocus - 1);\n      setDisplayTime((prevDisplay) =>focusTime - 1);\n      countDownTimeHandler()\n    }\n  }\n  const displayTimeHandler = () => {\n    /*Use conditional statements to switch between Focus and Break times. Use a useEffect to dynamically adjust foucs or break times \n    being displayed in at the bottom of the page each time the focus or break time changes*/\n      setIsFocusTime((prevState) => !prevState);\n      if (isFocusTime === true){\n        setDisplayTime(focusTime)\n      } else {\n        setDisplayTime(breakTime)\n      }\n    };\n\n\n  useInterval(\n    () => {\n      /* ToDo: Implement what should happen when the timer is running. \n      Refrence the break or work time states and then feeds the DisplayText.js (text at bottom of page that counts down each second)*/\n      if (countDownTime > 0){\n        setCountDownTime(countDownTime - 1)\n      };\n      if (countDownTime === 0){\n        setIsTimerRunning(false)\n        displayTimeHandler()\n        countDownTimeHandler()\n        setIsTimerRunning(true)\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  useEffect(\n    () => {\n      if (isTimerRunning === true) {\n        console.log(\"Ruinnig\")\n      } else {console.log(\"Paused\")}\n    }, [isTimerRunning]);\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*_________________________________________________________________________________________*/}\n          <WorkButtons \n            focusTime={focusTime} \n            isTimerRunning={isTimerRunning}\n            focusPlus={focusTimeHandlerPlus}\n            focusMinus={focusTimeHandlerMinus}\n          />\n          {/*_________________________________________________________________________________________*/}\n        </div>\n        {/*_________________________________________________________________________________________*/}\n       <BreakButtons \n          breakTime={breakTime} \n          isTimerRunning={isTimerRunning} \n          breakPlus={breakTimeHandlerPlus}\n          breakMinus={breaktimeHanlderMinus}\n       />\n       {/*_________________________________________________________________________________________*/}\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n         {/*_________________________________________________________________________________________*/}\n         <StartStop  playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning} />\n         {/*_________________________________________________________________________________________*/}\n        </div>\n      </div>\n        <DisplayText isTimerRunning={isTimerRunning} displayTime={displayTime} countDownTime={countDownTime}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}