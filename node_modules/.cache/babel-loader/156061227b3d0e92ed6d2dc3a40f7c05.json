{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Space\\\\Desktop\\\\Thinkful\\\\Qualified\\\\Project- Pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakButtons from \"./BreakButtons\";\nimport WorkButtons from \"./WorkButtons\";\nimport StartStop from \"./StartStop\";\nimport DisplayText from \"./DisplayText\";\nimport { minutesToDuration } from \"../utils/duration/index\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [breakTime, setBreakTime] = useState(5);\n  const [focusTime, setFocusTime] = useState(25);\n  const [displayTime, setDisplayTime] = useState(focusTime);\n  useInterval(() => {\n    /* ToDo: Implement what should happen when the timer is running. \n    Refrence the break or work time states and then updates them each second. \n    Feeds the DisplayText at bottom of page that counts down*/\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    console.log(minutesToDuration(5));\n  }\n\n  useEffect(() => {\n    if (isTimerRunning === true) {\n      console.log(\"Ruinnig\");\n    } else {\n      console.log(\"Paused\");\n    }\n  }, [isTimerRunning]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WorkButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(BreakButtons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    classNames: classNames,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }))), /*#__PURE__*/React.createElement(DisplayText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Space/Desktop/Thinkful/Qualified/Project- Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useEffect","classNames","useInterval","BreakButtons","WorkButtons","StartStop","DisplayText","minutesToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","breakTime","setBreakTime","focusTime","setFocusTime","displayTime","setDisplayTime","playPause","prevState","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,iBAAR,QAAgC,yBAAhC;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA2Bb,QAAQ,CAAC,CAAD,CAAzC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA2Bf,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAA+BjB,QAAQ,CAACc,SAAD,CAA7C;AAGAX,EAAAA,WAAW,CACT,MAAM;AACJ;AACN;AACA;AACK,GALQ,EAMTO,cAAc,GAAG,IAAH,GAAU,IANf,CAAX;;AASA,WAASQ,SAAT,GAAqB;AACnBP,IAAAA,iBAAiB,CAAEQ,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,iBAAiB,CAAC,CAAD,CAA7B;AACD;;AAECP,EAAAA,SAAS,CACP,MAAM;AACJ,QAAIS,cAAc,KAAK,IAAvB,EAA6B;AAC3BU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAFD,MAEO;AAACD,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAsB;AAC/B,GALM,EAKJ,CAACX,cAAD,CALI,CAAT;AAOF,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAOC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPD,CADF,eAWE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEC,oBAAC,SAAD;AAAY,IAAA,SAAS,EAAEQ,SAAvB;AAAkC,IAAA,UAAU,EAAEhB,UAA9C;AAA0D,IAAA,cAAc,EAAEQ,cAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADF,CAXF,eAkBI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,CADF;AAsBD;;AAED,eAAeD,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakButtons from \"./BreakButtons\";\nimport WorkButtons from \"./WorkButtons\"\nimport StartStop from \"./StartStop\"\nimport DisplayText from \"./DisplayText\"\nimport {minutesToDuration} from \"../utils/duration/index\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [breakTime, setBreakTime] =useState(5)\n  const [focusTime, setFocusTime] =useState(25)\n  const [displayTime, setDisplayTime] =useState(focusTime)\n\n\n  useInterval(\n    () => {\n      /* ToDo: Implement what should happen when the timer is running. \n      Refrence the break or work time states and then updates them each second. \n      Feeds the DisplayText at bottom of page that counts down*/\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    console.log(minutesToDuration(5))\n  }\n\n    useEffect(\n      () => {\n        if (isTimerRunning === true) {\n          console.log(\"Ruinnig\")\n        } else {console.log(\"Paused\")}\n      }, [isTimerRunning])\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*_________________________________________________________________________________________*/}\n          <WorkButtons/>\n          {/*_________________________________________________________________________________________*/}\n        </div>\n        {/*_________________________________________________________________________________________*/}\n       <BreakButtons/>\n       {/*_________________________________________________________________________________________*/}\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n         {/*_________________________________________________________________________________________*/}\n         <StartStop  playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning}  />\n         {/*_________________________________________________________________________________________*/}\n        </div>\n      </div>\n        <DisplayText/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}