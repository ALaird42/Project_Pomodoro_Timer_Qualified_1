{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Space\\\\Desktop\\\\Thinkful\\\\Qualified\\\\Project- Pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\DisplayText.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration/index\";\n\nfunction DisplayText(props) {\n  const {\n    isTimerRunning,\n    displayTime,\n    countDownTime,\n    isFocusTime\n  } = props;\n  const timeToDisplay = minutesToDuration(displayTime);\n  const breakDisplay = `On Break for ${timeToDisplay}`;\n  const focusDisplay = `Focusing for ${timeToDisplay}`;\n  let displayTimeText = focusDisplay;\n  const contDownPercentage = 100 - 100(countDownTime / (displayTime * 60));\n\n  if (isFocusTime === true) {\n    displayTimeText = focusDisplay;\n  } else {\n    displayTimeText = breakDisplay;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, displayTimeText, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, secondsToDuration(countDownTime), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${contDownPercentage}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  })))));\n}\n\nexport default DisplayText;","map":{"version":3,"sources":["C:/Users/Space/Desktop/Thinkful/Qualified/Project- Pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/DisplayText.js"],"names":["React","minutesToDuration","secondsToDuration","DisplayText","props","isTimerRunning","displayTime","countDownTime","isFocusTime","timeToDisplay","breakDisplay","focusDisplay","displayTimeText","contDownPercentage","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,EAA0BC,iBAA1B,QAAkD,yBAAlD;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AACvB,QAAM;AAACC,IAAAA,cAAD;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,aAA9B;AAA6CC,IAAAA;AAA7C,MAA4DJ,KAAlE;AACA,QAAMK,aAAa,GAAGR,iBAAiB,CAACK,WAAD,CAAvC;AACA,QAAMI,YAAY,GAAI,gBAAeD,aAAc,EAAnD;AACA,QAAME,YAAY,GAAI,gBAAeF,aAAc,EAAnD;AACA,MAAIG,eAAe,GAAGD,YAAtB;AAEA,QAAME,kBAAkB,GAAI,MAAM,IAAIN,aAAa,IAAED,WAAW,GAAC,EAAd,CAAjB,CAAlC;;AAEA,MAAIE,WAAW,KAAG,IAAlB,EAAuB;AACnBI,IAAAA,eAAe,GAAGD,YAAlB;AACH,GAFD,MAEO;AACHC,IAAAA,eAAe,GAAGF,YAAlB;AACH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEQ;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCE,eAAjC,aAFJ,eAII;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCV,iBAAiB,CAACK,aAAD,CADlB,eAJJ,CADA,CAFR,eAYQ;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AACI,IAAA,SAAS,EAAC,cADd;AAEI,IAAA,IAAI,EAAC,aAFT;AAGI,qBAAc,GAHlB;AAII,qBAAc,KAJlB;AAKI,qBAAc,GALlB,CAKsB;AALtB;AAMI,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAG,GAAEF,kBAAmB;AAA/B,KANX,CAMgD;AANhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ,CADA,CAZR,CADJ;AA6BH;;AAED,eAAeV,WAAf","sourcesContent":["import React from \"react\"\r\nimport {minutesToDuration,secondsToDuration} from \"../utils/duration/index\"\r\n\r\nfunction DisplayText(props){\r\n    const {isTimerRunning, displayTime, countDownTime, isFocusTime} = props\r\n    const timeToDisplay = minutesToDuration(displayTime)\r\n    const breakDisplay = `On Break for ${timeToDisplay}`\r\n    const focusDisplay = `Focusing for ${timeToDisplay}`\r\n    let displayTimeText = focusDisplay\r\n\r\n    const contDownPercentage = (100 - 100(countDownTime/(displayTime*60)))\r\n\r\n    if (isFocusTime===true){\r\n        displayTimeText = focusDisplay\r\n    } else {\r\n        displayTimeText = breakDisplay\r\n    }\r\n\r\n    return(\r\n        <div>\r\n                {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n                    <h2 data-testid=\"session-title\">{displayTimeText} minutes</h2>\r\n                    {/* TODO: Update message below to include time remaining in the current session */}\r\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                    {secondsToDuration(countDownTime)} remaining\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                    <div\r\n                        className=\"progress-bar\"\r\n                        role=\"progressbar\"\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                        style={{ width: `${contDownPercentage}%` }} // TODO: Increase width % as elapsed time increases\r\n                    />\r\n                    </div>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayText"]},"metadata":{},"sourceType":"module"}